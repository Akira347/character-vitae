name: CI

on:
    push:
        branches: [develop, main]
    pull_request:
        branches: [develop]

jobs:
    back:
        runs-on: ubuntu-latest
        env:
            DATABASE_URL: 'pgsql://cv_user:cv_pass@127.0.0.1:5432/character_vitae_test'
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: cv_user
                    POSTGRES_PASSWORD: cv_pass
                    POSTGRES_DB: character_vitae_test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - uses: actions/checkout@v3

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.3'
                  extensions: mbstring, intl, pdo_pgsql, xml

            - name: Install PHP dependencies
              run: composer install --no-interaction --prefer-dist

            - name: Wait for PostgreSQL
              run: |
                  for i in {1..10}; do
                      pg_isready -h 127.0.0.1 -p 5432 && break
                      sleep 2
                  done

            - name: Create test database
              run: php bin/console doctrine:database:create --env=test --if-not-exists

            - name: Run Doctrine migrations
              env:
                  DATABASE_URL: 'pgsql://cv_user:cv_pass@127.0.0.1:5432/character_vitae_test'
              run: php bin/console doctrine:migrations:migrate --env=test --no-interaction

            - name: Run PHPUnit
              env:
                  APP_ENV: test
                  DATABASE_URL: 'pgsql://cv_user:cv_pass@127.0.0.1:5432/character_vitae_test'
              run: php bin/phpunit --colors=never --testsuite "Project Test Suite"

            - name: Run PHPStan
              run: vendor/bin/phpstan analyse

            - name: Run PHP-CS-Fixer
              run: |
                  vendor/bin/php-cs-fixer fix --diff --dry-run --format=checkstyle || (
                      echo "::error::PHP-CS-Fixer found style violations."
                      exit 1
                  )

    front:
        runs-on: ubuntu-latest
        needs: back
        steps:
            - uses: actions/checkout@v3
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
            - name: Installer les d√©pendances front (skip Husky)
              working-directory: front
              env:
                  HUSKY_SKIP_INSTALL: 1
              run: npm ci
            - name: Run ESLint
              working-directory: front
              run: npm run lint
            - name: Run Prettier check
              working-directory: front
              run: npm run format -- --check
            - name: Build front
              working-directory: front
              run: npm run build
